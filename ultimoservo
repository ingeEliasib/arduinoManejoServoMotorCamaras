//servo y leds via blueto
#include <SoftwareSerial.h>
#include <Servo.h>

SoftwareSerial mySerial(7, 9);  // RX, TX
Servo camara1;  // Objeto para controlar el servo

char myChar;
int currentDegree = 90;  // Inicializar en 90 grados

#define LED1 2
#define LED2 3
#define LED3 4

void setup() {
  mySerial.begin(9600);
  mySerial.println("mySerial OPEN");

  pinMode(LED1, OUTPUT);
  pinMode(LED2, OUTPUT);
  pinMode(LED3, OUTPUT);

  camara1.attach(9);  // El pin del servo ahora es el 9
  camara1.write(currentDegree);  // Posicionar el servo en el Ã¡ngulo inicial
}

void loop() {
  if (mySerial.available()) {
    myChar = mySerial.read();

    switch (myChar) {
      case 'a':
        digitalWrite(LED1, HIGH);
        break;
      case 'A':
        digitalWrite(LED1, LOW);
        break;
      case 'b':
        digitalWrite(LED2, HIGH);
        break;
      case 'B':
        digitalWrite(LED2, LOW);
        break;
      case 'c':
        digitalWrite(LED3, HIGH);
        break;
      case 'C':
        digitalWrite(LED3, LOW);
        break;
      case 'd':
        digitalWrite(LED1, HIGH);
        digitalWrite(LED2, HIGH);
        digitalWrite(LED3, HIGH);
        break;
      case 'D':
        digitalWrite(LED1, LOW);
        digitalWrite(LED2, LOW);
        digitalWrite(LED3, LOW);
        break;
      case 's':
        int targetDegree = mySerial.parseInt();
        moveServo(targetDegree);
        break;
      default:
        mySerial.println("Opcion invalida");
        break;
    }
  }
}

void moveServo(int targetDegree) {
  int step = (targetDegree > currentDegree) ? 2 : -2;

  while (currentDegree != targetDegree) {
    currentDegree += step;
    currentDegree = constrain(currentDegree, 0, 180);
    camara1.write(currentDegree);
    delay(100);
  }
}



